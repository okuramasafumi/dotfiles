" Vimrc
" Set encoding
set encoding=utf-8

scriptencoding utf-8

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

call plug#begin('~/.vim/plugins')

" Make sure you use single quotes

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Plug 'tpope/vim-rhubarb'
" Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
" Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rails'
" Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'slim-template/vim-slim'
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer' }
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'kana/vim-smartchr'
Plug 'kana/vim-smartinput'
Plug 'kana/vim-textobj-user' | Plug 'rhysd/vim-textobj-ruby'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-ruby/vim-ruby'
Plug 'skwp/vim-rspec', { 'for': 'ruby' }
Plug 'fatih/vim-go'
" Plug 'scrooloose/syntastic'
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/vim-easy-align'
Plug 'nelstrom/vim-visual-star-search'
Plug 'rizzatti/dash.vim'
Plug 'tomasr/molokai'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
Plug 'mattn/emmet-vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'janko-m/vim-test'
Plug 'othree/yajs.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'mhinz/vim-startify'
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'pearofducks/ansible-vim'
Plug 'w0rp/ale'
Plug 'luochen1990/rainbow'

Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'yuezk/vim-js'
Plug 'MaxMEllon/vim-jsx-pretty'

Plug 'Shougo/deoplete-rct'

" Plug 'mileszs/ack.vim'
Plug 'mbbill/undotree'
Plug 'cohama/agit.vim'
Plug 'thinca/vim-quickrun'

Plug 'vim-jp/vimdoc-ja'
Plug 'jsfaint/gen_tags.vim' " CTags generation

Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'godlygeek/tabular' " Required for vim-markdown
Plug 'preservim/vim-markdown'

Plug 'machakann/vim-sandwich' " Surround

Plug 'rust-lang/rust.vim'

if has('nvim')
  Plug 'neovim/nvim-lspconfig' " Neovim native LSP

  Plug 'b0o/schemastore.nvim' " JSON schema access

  Plug 'direnv/direnv.vim'
  Plug 'kassio/neoterm'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  Plug 'rebelot/kanagawa.nvim'

  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'petertriho/cmp-git'
  Plug 'ray-x/cmp-treesitter'
  Plug 'quangnguyen30192/cmp-nvim-ultisnips'
  Plug 'quangnguyen30192/cmp-nvim-tags'
  Plug 'hrsh7th/nvim-cmp'

  Plug 'lewis6991/gitsigns.nvim'

  Plug 'nvim-lualine/lualine.nvim'
  Plug 'kyazdani42/nvim-web-devicons'

  Plug 'folke/trouble.nvim'

  Plug 'simrat39/rust-tools.nvim'
else
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'

  Plug 'airblade/vim-gitgutter'
  Plug 'itchyny/lightline.vim'
endif

Plug 'ryanoasis/vim-devicons'

Plug 'cohama/lexima.vim'

Plug 'rhysd/git-messenger.vim'

Plug 'zerowidth/vim-copy-as-rtf'

Plug 'github/copilot.vim'

" Add plugins to &runtimepath
call plug#end()

" Auto command group setting
augroup MyAutoCmd
  autocmd!
augroup END

" <Leader> is now '<space>' not '\'
nnoremap <Space> <Nop>
let mapleader = ' '

" source ~/.vim/settings/neobundle.vim

" % to bounce from do to end etc.
" runtime! macros/matchit.vim

" Basic configuration, showing absolute line number of
" current line and ruler
" Show relative number with GUI only
if has('gui_running')
  set relativenumber
endif
set number
set ruler

" Syntax enabling
syntax on

" Show mode and command
set showmode
set showcmd

" Don't beep
set visualbell

" Enable mouse
" set mouse=a

" Store command histories
set history=1000

" Folding
set foldmethod=syntax
set foldenable
set foldlevel=2
set foldopen=hor,insert,search

" Whitespace stuff
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore&
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Use English as default help language
set helplang=en,ja

" Use modeline overrides
set modeline
set modelines=10

" Swapfile and backup
set swapfile
set directory=~/.vim/swap
set backup
set backupdir=~/.vim/backup

" Support true color
set termguicolors

" Status bar
set laststatus=2

" Japanese is not spell errors
set spelllang=en,cjk

" Auto commands
if has('autocmd')
  " Remember last location in file
  autocmd MyAutoCmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  " md is markdown, not modula2!
  autocmd MyAutoCmd BufNewFile,BufRead *.md set filetype=markdown

  " ES6 is javascript
  autocmd MyAutoCmd BufNewFile,BufRead *.{es6,es6.js} set filetype=javascript

  " Close help with q
  autocmd MyAutoCmd FileType help nnoremap <silent> <buffer> q <C-W>c
  autocmd MyAutoCmd FileType qf nnoremap <silent> <buffer> q :cclose<CR>

  autocmd MyAutoCmd VimEnter *.txt,*.md,*.markdown setlocal spell
  autocmd MyAutoCmd FileType gitcommit setlocal spell

  autocmd MyAutoCmd VimEnter *.gemfile set filetype=ruby

  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=?
  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=!
  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=@-@

  " Auto load vimrc
  if has('gui_running')
    autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
          \ | redraw
    autocmd MyAutoCmd BufWritePost $MYGVIMRC source $MYGVIMRC | redraw
  else
    autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | redraw
  endif
endif

" Easy help keymapping
" nnoremap <Leader>h :<C-u>help<Space>

" Edit vimrc keymappings
nnoremap <silent> <Leader>ev  :<C-u>edit $MYVIMRC<CR>
if has('gui_running')
  nnoremap <silent> <Leader>eg  :<C-u>edit $MYGVIMRC<CR>
endif

" colorscheme
set t_Co=256
color molokai
if !has('gui_running')
  hi Normal ctermbg=none
endif

" Save undo history after quitting
if has('persistent_undo')
  if has('nvim-0.5')
    " New format in https://github.com/neovim/neovim/pull/13973 (f42e932,
    " 2021-04-13).
    let s:target_path = expand('~/.vim/undo-nvim')
  else
    let s:target_path = expand('~/.vim/undo')
  endif
  let &undodir=s:target_path
  set undofile
endif

" Ref.vim
let g:ref_use_vimproc = 1

" dash.vim configuration
if has('mac')
  nmap <silent> <Leader>d <Plug>DashSearch
endif

" CTags
set tags&
set tags+=gems.tags

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

let g:startify_bookmarks = [ {'c': '~/.vimrc'}, '~/.zshrc' ]
let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ ]

" Disable <C-S> in insert mode
let g:surround_no_insert_mappings = 1

" Go
let g:go_dispatch_enabled = 1
let g:go_metalinter_autosave = 1

let test#strategy = "dispatch"

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>

nnoremap <Leader>f :<C-u>Files<CR>
nnoremap <Leader>b :<C-u>Buffers<CR>
nnoremap <Leader>hi :<C-u>History<CR>
nnoremap <Leader>d :<C-u>Dirvish<CR>

source ~/.vim/settings/bundle/easy-align.vim
source ~/.vim/settings/bundle/rails.vim
" source ~/.vim/settings/bundle/syntastic.vim
" source ~/.vim/settings/bundle/ycm.vim
source ~/.vim/settings/bundle/ultisnips.vim

hi Visual           guifg=NONE        guibg=#262D51     gui=NONE      ctermfg=NONE        ctermbg=darkgray    cterm=NONE

set hidden

" Fugitive key mappings
" Fugitive prefix
nnoremap [Fugitive] <Nop>
nmap <Leader>g [Fugitive]

nnoremap [Fugitive]g :<C-u>Git<CR>
nnoremap [Fugitive]d :<C-u>Git diff<CR>
nnoremap [Fugitive]s :<C-u>Git status<CR>
nnoremap [Fugitive]l :<C-u>Git log<CR>
nnoremap [Fugitive]a :<C-u>Git add %<CR>
nnoremap [Fugitive]c :<C-u>Git commit<CR>
nnoremap [Fugitive]C :<C-u>Git commit --amend<CR>
nnoremap [Fugitive]b :<C-u>Git blame<CR>

if has('nvim')
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "ruby", "javascript", "typescript", "c" }, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  ignore_install = {}, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "c", "rust" },  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
require('kanagawa').setup({
  transparent = true,
})

-- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
snippet = {
  -- REQUIRED - you must specify a snippet engine
  expand = function(args)
  -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
  -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
  -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
  vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
end,
},
    mapping = {
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      ['<C-e>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
      }),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    },
  sources = cmp.config.sources({
  { name = 'nvim_lsp' },
  -- { name = 'vsnip' }, -- For vsnip users.
  -- { name = 'luasnip' }, -- For luasnip users.
  { name = 'ultisnips' }, -- For ultisnips users.
  -- { name = 'snippy' }, -- For snippy users.
  }, {
  { name = 'treesitter' },
  }, {
    {
      name = 'buffer',
      option = {
        get_bufnrs = function()
          return vim.api.nvim_list_bufs()
        end
        }
    },
    { name = 'tags' }
  })
})

  -- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
  sources = cmp.config.sources({
    { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
  { name = 'path' }
  }, {
  { name = 'cmdline' }
  })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
require('lspconfig')['tsserver'].setup {
  capabilities = capabilities
}

require('lspconfig').yamlls.setup {
  settings = {
    yaml = {
      schemas = require('schemastore').json.schemas(),
      -- schemas = {
        -- ["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*"
      -- },
    },
  }
}

local jsonls_capabilities = vim.lsp.protocol.make_client_capabilities()
jsonls_capabilities.textDocument.completion.completionItem.snippetSupport = true

require'lspconfig'.jsonls.setup {
  capabilities = jsonls_capabilities,
  settings = {
    json = {
      schemas = require('schemastore').json.schemas(),
    },
  },
}

require'lspconfig'.typeprof.setup {
  autostart = false,
}

require('gitsigns').setup()

require('lualine').setup()

require('trouble').setup()

require('rust-tools').setup({})
EOF
colorscheme kanagawa
if executable('typeprof')
  autocmd MyAutoCmd filetype ruby LspStart typeprof
end
else
  set pyx=3 " For deoplete to work
  if executable('language_server-ruby')
    autocmd User lsp_setup call lsp#register_server({
          \ 'name': 'language_server-ruby',
          \ 'cmd': {server_info->['language_server-ruby']},
          \ 'whitelist': ['ruby'],
          \ })
    autocmd FileType ruby setlocal omnifunc=lsp#complete
  endif

  let g:deoplete#enable_at_startup = 1
  call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
  call deoplete#custom#source('LanguageClient',
        \ 'min_pattern_length',
        \ 2)
  call deoplete#custom#option('sources', {
        \ 'ruby': ['syntax', 'buffer', 'member', 'omni', 'LanguageClient', 'ultisnips', 'around'],
        \})
  autocmd CompleteDone * silent! pclose!

  source ~/.vim/settings/bundle/lightline.vim
endif

let g:ale_linters = {
\   'ruby': ['rubocop'],
\   'rust': ['rustfmt'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\   'javascriptreact': ['prettier', 'eslint'],
\   'typescriptreact': ['prettier', 'eslint'],
\   'ruby': ['rubocop'],
\   'rust': ['rustfmt'],
\}
let g:ale_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_disable_lsp = 1
" let g:ale_javascript_prettier_options = '--no-semi --single-quote --jsx-single-quote --trailing-comma none'
let g:ale_ruby_rubocop_executable='bundle'
let g:ale_floating_preview=1
let g:ale_cursor_detail = 1
let g:ale_hover_to_floating_preview=1 " With Neovim it shows hover info in floating window
" let g:ale_set_balloons=1 " Shows information wit balloon window in Vim
let g:ale_echo_cursor = 0
let g:rainbow_active = 1

let g:vim_jsx_pretty_colorful_config = 1

nmap <Leader>q <Plug>(quickrun)
vmap <Leader>q <Plug>(quickrun-op)

let g:loaded_gentags#gtags = 1

" This auto folding behavior is so annoying
let g:vim_markdown_folding_disabled = 1

" Enable surround.vim keymap for sandwich
runtime macros/sandwich/keymap/surround.vim

" External rc files
" Include vimrc for mac
" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

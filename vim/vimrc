" This is vimrc

" This is not vi, but vim!
set nocompatible

" Auto command group setting
augroup MyAutoCmd
  autocmd!
augroup END

" <Leader> is now '<space>' not '\'
nnoremap <Space> <Nop>
let mapleader = ' '

"***************************************************
" NeoBundle configuration
"***************************************************

filetype off " This is necessary

if has('vim_starting')
  set runtimepath&
  set runtimepath+=$HOME/.vim/bundle/neobundle.vim
endif
call neobundle#rc(expand('~/.vim/bundle'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
      \ 'build': {
      \ 'windows': 'make -f make_mingw32.mak',
      \ 'mac': 'make -f make_mac.mak',
      \ 'unix': 'make -f make_unix.mak' } }

NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet', {
      \ 'depends': 'Shougo/neocomplete'}
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/context_filetype.vim'

NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-bundler'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-repeat'
NeoBundleLazy 'tpope/vim-haml', { 'autoload': { 'filetypes': ['haml'] } }

NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'

NeoBundle 'nelstrom/vim-visual-star-search'

NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-ref'

NeoBundle 'kana/vim-smartchr'
NeoBundle 'kana/vim-smartinput'
NeoBundle 'kana/vim-textobj-user'
NeoBundleLazy 'rhysd/vim-textobj-ruby', {
      \ 'depends': 'kana/vim-textobj-user',
      \ 'autoload': { 'filetypes': 'ruby' } }

NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'basyura/unite-rails'
NeoBundle 'rking/ag.vim'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'rodjek/vim-puppet'
NeoBundleLazy 'skwp/vim-rspec', { 'autoload': { 'filetypes': 'ruby' } }
NeoBundleLazy 'vim-ruby/vim-ruby', {
      \'autoload': {
      \'filetypes': ['ruby', 'eruby', 'haml'] } }

NeoBundle 'ZoomWin'
NeoBundle 'sudo.vim'
NeoBundle 'taglist.vim'

" % to bounce from do to end etc.
runtime! macros/matchit.vim

"NeoBundle 'tpope/vim-endwise'

" load the plugin and indent configuration for the detected filetype
filetype plugin indent on

" Basic configuration, showing number and ruler
set number
set ruler

" Syntax enabling
syntax on

" Show mode and command
set showmode
set showcmd

" Don't beep
set visualbell

" Store command histories
set history=1000

" Statusline setting
" Example => [git(master)] example.rb [RUBY][utf-8][unix]            C:10,L:20/100   20%
set statusline=%{fugitive#statusline()}\ %f\ %<%m%r%h%w[%Y][%{&fenc}][%{&ff}]%=C:%c,L:%l/%L%11p%%
highlight statusline guifg=RED

" Status bar
set laststatus=2

" Folding
set foldmethod=syntax
set foldenable
set foldlevel=2
set foldopen=hor,insert,search

" Set encoding
set encoding=utf-8

" Whitespace stuff
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore&
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Use English as default help language
set helplang=en,ja

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use modeline overrides
set modeline
set modelines=10

" Swapfile and backup
set swapfile
set directory=~/.vim/swap
set backup
set backupdir=~/.vim/backup

" : is important
nnoremap ; :
nnoremap : ;

" Clean menu
let g:DrChipTopLvlMenu = ""
"unmenu &Plugin.&comment

" Auto commands
if has("autocmd")
  " Remember last location in file
  au MyAutoCmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Easy help keymapping
nnoremap <C-h> :<C-u>help<Space>

" Edit vimrc keymappings
nnoremap <silent> <Leader>ev  :<C-u>edit $MYVIMRC<CR>
if has("gui_running")
  nnoremap <silent> <Leader>eg  :<C-u>edit $MYGVIMRC<CR>
endif

" Auto load vimrc
if has("gui_running")
  autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
  \ | redraw
  autocmd MyAutoCmd BufWritePost $MYGVIMRC source $MYGVIMRC | redraw
else
  autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | redraw
endif

" Default color scheme for non_gui
if !has("gui_running")
  color wombat
endif

" Save undo history after quitting
if has('persistent_undo')
  set undofile
  set undodir=~/.vim/undo
endif

" Ref.vim
let g:ref_use_vimproc = 1

" Gundo configuration
nnoremap <Leader>d :<C-u>GundoToggle<CR>

" Smartchr configuration
inoremap <expr> = smartchr#loop('=', '==', ' = ', ' == ' )

"************************
" Syntastic configuration
"************************
let g:syntastic_mode_map = { 'mode': 'passive',
      \ 'active_filetypes': ['ruby', 'html', 'haml', 'javascript',
      \ 'sass', 'scss'],
      \ 'passive_filetypes': []}

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>
set tags&
set tags+=gems.tags

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" coverage.vim
" If coverage.vim was found in project directory, try to source it
let g:coverage_path = $PWD."/coverage.vim"
if filereadable(coverage_path)
  autocmd MyAutoCmd BufRead $PWD/app/**/*.rb source $PWD/coverage.vim
endif

"***********************
" Unite.vim configuration
"***********************

" Unite.vim keymappings
" Unite prefix
nnoremap [Unite] <Nop>
nmap <Leader>u [Unite]

" Open buffers
nnoremap [Unite]b :<C-u>Unite buffer -no-start-insert<CR>

" Open files
nnoremap [Unite]f :<C-u>Unite file file/new<CR>

" Open project files
nnoremap [Unite]u :<C-u>Unite file_rec/async<CR>

" Open recently-opened files
nnoremap [Unite]l :<C-u>Unite file_mru<CR>

" Open all
nnoremap [Unite]a :<C-u>Unite buffer file file_mru file_rec/async<CR>

" Open tags
nnoremap [Unite]t :<C-u>Unite tag<CR>

" Open outline
nnoremap [Unite]o :<C-u>Unite outline<CR>

" Open completion candidates
nnoremap [Unite]c :<C-u>Unite neocomplcache<CR>
inoremap <C-x>c <ESC>:<C-u>Unite neocomplcache<CR>

" Create new file
nnoremap [Unite]n :<C-u>Unite file/new<CR>

" Open register
nnoremap [Unite]r :<C-u>Unite register<CR>

" Start insert-mode when opening unite.vim
let g:unite_enable_start_insert=1

" Ignore stuffs for rails
call unite#custom_source('file_rec/async', 'ignore_pattern', 'assets/fonts\|assets/images\|vendor/bundle')

" Cache
let g:unite_source_rec_max_cache_files=10000
let g:unite_source_rec_min_cache_files=10

autocmd MyAutoCmd FileType unite call s:unite_my_configuration()
function! s:unite_my_configuration()

  " Open source with horizontally-splited window
  nnoremap <silent> <buffer> <expr> s unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-S> unite#do_action('split')

  " Open source with vertically-splited window
  nnoremap <silent> <buffer> <expr> v unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')

  " Open source with new tab
  nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
  inoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')

  " Dig into directory
  nnoremap <silent> <buffer> <expr> r unite#do_action('rec/async')
  inoremap <silent> <buffer> <expr> <C-R> unite#do_action('rec/async')

  " Exit unite with escape
  nmap <silent> <buffer> <ESC> <Plug>(unite_exit)
  imap <silent> <buffer> <ESC><ESC> <ESC><Plug>(unite_exit)

  " Close unite with <C-q>
  imap <silent> <buffer> <C-q> <ESC><Plug>(unite_all_exit)
endfunction

autocmd MyAutoCmd User Rails call s:unite_rails_configuration()
function! s:unite_rails_configuration()
  nnoremap <buffer> [unite]v :<C-u>Unite rails/view<CR>
  nnoremap <buffer> [unite]m :<C-u>Unite rails/model<CR>
  nnoremap <buffer> [unite]c :<C-u>Unite rails/controller<CR>
  nnoremap <buffer> [unite]g :<C-u>Unite rails/config<CR>
  nnoremap <buffer> [unite]s :<C-u>Unite rails/spec<CR>
  nnoremap <buffer> [unite]k          :<C-u>Unite rails/rake<CR>
endfunction

"***********************
" VimFiler configuration
"***********************

" Open VimFiler with <Space>f
nnoremap <Leader>f :VimFiler -buffer-name=explorer -split -winwidth=45 -toggle <CR>

"let g:vimfiler_as_default_explorer = 1

"***********************
" Neocomplete configuration
"***********************

" Neocomplete enabling
let g:neocomplete#enable_at_startup = 1

" Start completion with 1 char
let g:neocomplete#auto_completion_start_length = 1

" When using snippet and syntax completion starts with 2 chars
call neocomplete#custom#source(
      \'snippets_complete', 'min_pattern_length', 1)
call neocomplete#custom#source(
      \'member_complete', 'min_pattern_length', 2)
call neocomplete#custom#source(
      \'syntax_complete', 'min_pattern_length', 2)
call neocomplete#custom#source(
      \'dictionary_complete', 'min_pattern_length', 2)
call neocomplete#custom#source(
      \'buffer_complete', 'min_pattern_length', 2)

" Tag completion is too heavy...
if !exists('g:neocomplete#disabled_sources_list')
  let g:neocomplete#disabled_sources_list = {}
endif
let g:neocomplete#disabled_sources_list._ = ['tags_complete']

" Force overwrite completefunc
let g:neocomplete#force_overwrite_completefunc = 1

" Disable preset snippets
let g:neosnippet#disable_runtime_snippets = {
      \ 'ruby': 1,
      \}

" Dictionary for ruby
let g:neocomplete#dictionary_filetype_lists = {
      \'ruby' : expand('~/.vim/dictionaries/ruby.dict'),
      \ }

inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Snippets directory
let g:neosnippet#snippets_directory = '~/.vim/snippets/'

" Haml as ruby
if !exists('g:neocomplete#same_filetype_lists')
  let g:neocomplete#same_filetype_lists = {}
endif
call neocomplete#set_dictionary_helper(g:neocomplete#same_filetype_lists,
      \ 'haml', 'ruby')

" Snippets editing
noremap <silent> <Leader>es :NeoSnippetEdit<CR>
 
" Extract snippets with <C-k>
imap <silent> <C-k> <Plug>(neosnippet_expand_or_jump)
imap <silent> <C-j> <Plug>(neosnippet_jump)

" Disable preview
set completeopt-=preview

" Define functions for various ruby files
function! s:setup_for_rspec()
  NeoCompleteSetFileType ruby.rspec
  NeoSnippetSource ~/.vim/snippets/rspec.snip
endfunction

function! s:setup_for_rails()
  NeoCompleteSetFileType ruby.rails
  NeoSnippetSource ~/.vim/snippets/rails.snip
endfunction

if has('autocmd')
  " set filetype for neocomplete and load snippet
  autocmd MyAutoCmd BufEnter *_spec.rb call s:setup_for_rspec()
  autocmd User Rails call s:setup_for_rails()
endif

"******************
" Fugitive configuration
"******************

" Fugitive key mappings
" Fugitive prefix
nnoremap [Fugitive] <Nop>
nmap <Leader>g [Fugitive]

nnoremap [Fugitive]d :<C-u>Gdiff<CR>
nnoremap [Fugitive]s :<C-u>Gstatus<CR>
nnoremap [Fugitive]l :<C-u>Glog<CR>
nnoremap [Fugitive]a :<C-u>Gwrite<CR>
nnoremap [Fugitive]c :<C-u>Gcommit<CR>
nnoremap [Fugitive]C :<C-u>Gcommit --amend<CR>
nnoremap [Fugitive]b :<C-u>Gblame<CR>

" Ruby debugger
let g:ruby_debugger_progname = 'mvim'

" External rc files
" Include vimrc for mac
" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif


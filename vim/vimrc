" Vimrc
" Set encoding
set encoding=utf-8

scriptencoding utf-8

" Auto command group setting
augroup MyAutoCmd
  autocmd!
augroup END

" <Leader> is now '<space>' not '\'
nnoremap <Space> <Nop>
let mapleader = ' '

source ~/.vim/settings/neobundle.vim

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Basic configuration, showing relative number, absolute line number of
" current line and ruler
set relativenumber
set number
set ruler

" Syntax enabling
syntax on

" Show mode and command
set showmode
set showcmd

" Don't beep
set visualbell

" Store command histories
set history=1000

" Folding
set foldmethod=syntax
set foldenable
set foldlevel=2
set foldopen=hor,insert,search

" Whitespace stuff
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore&
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Use English as default help language
set helplang=en,ja

" Use modeline overrides
set modeline
set modelines=10

" Swapfile and backup
set swapfile
set directory=~/.vim/swap
set backup
set backupdir=~/.vim/backup

" Status bar
set laststatus=2

source ~/.vim/settings/bundle/lightline.vim

" : is important
if !has('mac')
  nnoremap ; :
  nnoremap : ;
  vnoremap ; :
  vnoremap : ;
endif

" Easy escape
inoremap jj <Esc>

" Auto commands
if has('autocmd')
  " Remember last location in file
  au MyAutoCmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  " md is markdown, not modula2!
  au MyAutoCmd BufNewFile, BufRead *.md set filetype=markdown
endif

" Easy help keymapping
nnoremap <Leader>h :<C-u>help<Space>

" Close help with q
if has('autocmd')
  autocmd MyAutoCmd FileType help nnoremap <buffer> q <C-W>c
endif

" Edit vimrc keymappings
nnoremap <silent> <Leader>ev  :<C-u>edit $MYVIMRC<CR>
if has('gui_running')
  nnoremap <silent> <Leader>eg  :<C-u>edit $MYGVIMRC<CR>
endif

" Auto load vimrc
if has('gui_running')
  autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
  \ | redraw
  autocmd MyAutoCmd BufWritePost $MYGVIMRC source $MYGVIMRC | redraw
else
  autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | redraw
endif

" colorscheme
set t_Co=256
color molokai
if !has('gui_running')
  hi Normal ctermbg=none
endif

" Save undo history after quitting
if has('persistent_undo')
  set undofile
  set undodir=~/.vim/undo
endif

" Ref.vim
let g:ref_use_vimproc = 1

" Gundo configuration
nnoremap <Leader>n :<C-u>GundoToggle<CR>

" dash.vim configuration
nmap <silent> <Leader>d <Plug>DashSearch

" Smartchr configuration
inoremap <expr> = smartchr#loop('=', '==', ' = ', ' == ' )

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>
set tags&
set tags+=gems.tags

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

source ~/.vim/settings/bundle/easy-align.vim
source ~/.vim/settings/bundle/fugitive.vim
source ~/.vim/settings/bundle/neocomplete.vim
source ~/.vim/settings/bundle/rails.vim
source ~/.vim/settings/bundle/syntastic.vim
source ~/.vim/settings/bundle/unite.vim

" Taglist configuration
" Ctags command is defined in local vimrc
nnoremap <silent> <Leader>t :<C-u>TlistToggle<CR>

" External rc files
" Include vimrc for mac
" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif


# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby

snippet beg
abbr begin rescue end
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end

snippet req
options head
	require '${1:file}'

snippet end
	__END__

snippet case
abbr case when end
	case ${1:object}
	when ${2:condition}
		${3}
	end

snippet when
abbr when
	when ${1:condition}
		${2}

snippet def
abbr define method
	def ${1:method_name}
		${2}
	end

snippet if
abbr if
	if ${1:condition}
		${2}
	end

snippet ife
abbr if else
	if ${1:condition}
		${2}
	else
		${3}
	end

snippet elsif
	elsif ${1:condition}
		${2}

snippet unless
	unless ${1:condition}
		${2}
	end

snippet while
	while ${1:condition}
		${2}
	end

snippet for
	for ${1:e} in ${2:c}
		${3}
	end		

snippet until
	until ${1:condition}
		${2}
	end

# attr_reader
snippet atr
abbr attr_reader
	attr_reader :${1:attr_names}

# attr_writer
snippet atw
abbr attr_writer
	attr_writer :${1:attr_names}

# attr_accessor
snippet ata
abbr attr_accessor
	attr_accessor :${1:attr_names}

snippet defs
abbr define class method
	def self.${1:class_method_name}
		${2}
	end

# def method_missing
snippet defmm
abbr define method missing
	def method_missing(meth, *args, &blk)
		${1}
	end

snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}

snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}

snippet am
abbr alias_method
	alias_method :${1:new_name}, :${2:old_name}

snippet dir
	Filename.dirname(__FILE__)

snippet deli
abbr delete_if
	delete_if { |${1:e}| ${2} }

snippet dow
	downto(${1:0}) { |${2:n}| ${3} }

snippet tim
	times { |${1:n}| ${2} }

snippet upt
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }

snippet loo
	loop { ${1} }

snippet ea
abbr each with {}
	each { |${1:e}| ${2} }

snippet ead
abbr each with do
	each do |${1:e}|
		${2}
	end	

snippet eak
	each_key { |${1:key}| ${2} }

snippet eakd
	each_key do |${1:key}|
		${2}
	end

snippet eal
	each_line { |${1:line}| ${2} }

snippet eald
	each_line do |${1:line}|
		${2}
	end		

snippet eap
	each_pair { |${1:name}, ${2:val}| ${3} }

snippet eapd
	each_pair do |${1:name}, ${2:val}|
		${3}
	end			

snippet reve
	reverse_each { |${1:e}| ${2} }

snippet reved
	reverse_each do |${1:e}|
		${2}
	end	

snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }

snippet injd
	inject(${1:init}) do |${2:mem}, ${3:var}|
		${4}
	end		

snippet map
	map { |${1:e}| ${2} }

snippet mapd
	map do |${1:e}|
		${2}
	end		

snippet all
	all? { |${1:e}| ${2} }

snippet any
	any? { |${1:e}| ${2} }

snippet lam
	lambda { |${1:args}| ${2} }

snippet do
abbr block with local arg
	do |${1:variable}|
		${2}
	end

snippet de
abbr block without local args
  do
    ${1}
  end

# Snippets for binding.pry
snippet pry
abbr binding.pry
options head
  binding.pry

# Snippets for split gem
snippet ab
abbr ab_test
  ab_test("${1:experimentation_name}", "${2:first}", "${3:second}")

" Vimrc
" Set encoding
set encoding=utf-8

scriptencoding utf-8

if &compatible
  set nocompatible               " Be iMproved
endif

call plug#begin('~/.vim/plugins')

" Make sure you use single quotes

Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Plug 'cohama/agit.vim'
Plug 'rhysd/git-messenger.vim'
Plug 'rhysd/committia.vim'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'kana/vim-smartchr'
Plug 'kana/vim-smartinput'
Plug 'kana/vim-textobj-user' | Plug 'rhysd/vim-textobj-ruby'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/vim-easy-align'
Plug 'nelstrom/vim-visual-star-search'
Plug 'rizzatti/dash.vim'
Plug 'tomasr/molokai'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install' }
Plug 'justinmk/vim-dirvish'
Plug 'janko-m/vim-test'
Plug 'skywind3000/asyncrun.vim'
Plug 'mhinz/vim-startify'
Plug 'w0rp/ale'
Plug 'mbbill/undotree'
Plug 'thinca/vim-quickrun'
Plug 'vim-jp/vimdoc-ja'
Plug 'ryanoasis/vim-devicons'
Plug 'cohama/lexima.vim'
Plug 'zerowidth/vim-copy-as-rtf'
Plug 'github/copilot.vim'
Plug 'direnv/direnv.vim'

" Ruby/Rails
Plug 'vim-ruby/vim-ruby'
Plug 'skwp/vim-rspec', { 'for': 'ruby' }
" Plug 'tpope/vim-bundler', { 'for': 'ruby' } " Causes error with filetype.lua
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'slim-template/vim-slim'
Plug 'okuramasafumi/rspec-current.vim'

" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'yuezk/vim-js'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'othree/yajs.vim'

" Other Languages
Plug 'mattn/emmet-vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'pearofducks/ansible-vim'
Plug 'rust-lang/rust.vim'
Plug 'fatih/vim-go'
Plug 'jparise/vim-graphql'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'godlygeek/tabular' " Required for vim-markdown
Plug 'preservim/vim-markdown'

if has('nvim')
  Plug 'nvim-lua/plenary.nvim' " Utility
  Plug 'MunifTanjim/nui.nvim' " UI library

  Plug 'neovim/nvim-lspconfig' " Neovim native LSP
  Plug 'lukas-reineke/lsp-format.nvim'

  Plug 'b0o/schemastore.nvim' " JSON schema access

  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'nvim-treesitter/nvim-treesitter-context' " Context
  Plug 'nvim-treesitter/nvim-treesitter-refactor'
  Plug 'p00f/nvim-ts-rainbow'

  Plug 'nvim-neo-tree/neo-tree.nvim', { 'branch': 'v2.x' }

  Plug 'rebelot/kanagawa.nvim'

  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
  Plug 'petertriho/cmp-git'
  Plug 'ray-x/cmp-treesitter'
  Plug 'quangnguyen30192/cmp-nvim-ultisnips'
  Plug 'quangnguyen30192/cmp-nvim-tags'
  Plug 'dmitmel/cmp-cmdline-history'
  Plug 'hrsh7th/nvim-cmp'
  Plug 'onsails/lspkind-nvim'

  Plug 'TimUntersberger/neogit'
  Plug 'sindrets/diffview.nvim'
  Plug 'lewis6991/gitsigns.nvim'

  Plug 'nvim-lualine/lualine.nvim'
  Plug 'kyazdani42/nvim-web-devicons'

  Plug 'folke/trouble.nvim'

  Plug 'simrat39/rust-tools.nvim'

  Plug 'vijaymarupudi/nvim-fzf'
  Plug 'ibhagwan/fzf-lua', {'branch': 'main'}

  Plug 'mfussenegger/nvim-dap'
  Plug 'suketa/nvim-dap-ruby'
  Plug 'rcarriga/nvim-dap-ui'

  Plug 'antoinemadec/FixCursorHold.nvim' " Better CursorHold
  Plug 'gpanders/editorconfig.nvim'
  Plug 'kylechui/nvim-surround'
else
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'

  Plug 'airblade/vim-gitgutter'
  Plug 'itchyny/lightline.vim'

  Plug 'junegunn/fzf.vim'
  Plug 'machakann/vim-sandwich' " Surround
  Plug 'luochen1990/rainbow'
  Plug 'editorconfig/editorconfig-vim'
endif

" Add plugins to &runtimepath
call plug#end()

" Auto command group setting
augroup MyAutoCmd
  autocmd!
augroup END

" <Leader> is now '<space>' not '\'
nnoremap <Space> <Nop>
let mapleader = ' '

" % to bounce from do to end etc.
" runtime! macros/matchit.vim

" Basic configuration, showing absolute line number of
" current line and ruler
" Show relative number with GUI only
if has('gui_running')
  set relativenumber
endif
set number
set ruler

" Syntax enabling
syntax on

" Show mode and command
set showmode
set showcmd

" Don't beep
set visualbell

" Enable mouse
" set mouse=a

" Store command histories
set history=1000

" Folding
set foldmethod=syntax
set foldenable
set foldlevel=2
set foldopen=hor,insert,search

" Whitespace stuff
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore&
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Use English as default help language
set helplang=en,ja

" Use modeline overrides
set modeline
set modelines=10

" Swapfile and backup
set swapfile
set directory=~/.vim/swap
set backup
set backupdir=~/.vim/backup

" Support true color
set termguicolors

" Status bar
set laststatus=2

" Japanese is not spell errors
set spelllang=en,cjk

" Auto commands
if has('autocmd')
  " Remember last location in file
  autocmd MyAutoCmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  " md is markdown, not modula2!
  autocmd MyAutoCmd BufNewFile,BufRead *.md set filetype=markdown

  " ES6 is javascript
  autocmd MyAutoCmd BufNewFile,BufRead *.{es6,es6.js} set filetype=javascript

  " Close help with q
  autocmd MyAutoCmd FileType help nnoremap <silent> <buffer> q <C-W>c
  autocmd MyAutoCmd FileType qf nnoremap <silent> <buffer> q :cclose<CR>

  autocmd MyAutoCmd VimEnter *.txt,*.md,*.markdown setlocal spell
  autocmd MyAutoCmd FileType gitcommit setlocal spell

  autocmd MyAutoCmd VimEnter *.gemfile set filetype=ruby

  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=?
  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=!
  autocmd MyAutoCmd FileType ruby setlocal iskeyword+=@-@

  " Auto load vimrc
  if has('gui_running')
    autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
          \ | redraw
    autocmd MyAutoCmd BufWritePost $MYGVIMRC source $MYGVIMRC | redraw
  else
    autocmd MyAutoCmd BufWritePost $MYVIMRC source $MYVIMRC | redraw
  endif
endif

" Edit vimrc keymappings
nnoremap <silent> <Leader>ev  :<C-u>edit $MYVIMRC<CR>
if has('gui_running')
  nnoremap <silent> <Leader>eg  :<C-u>edit $MYGVIMRC<CR>
endif

" colorscheme
set t_Co=256
color molokai
if !has('gui_running')
  hi Normal ctermbg=none
endif

" Save undo history after quitting
if has('persistent_undo')
  if has('nvim-0.5')
    " New format in https://github.com/neovim/neovim/pull/13973 (f42e932,
    " 2021-04-13).
    let s:target_path = expand('~/.vim/undo-nvim')
  else
    let s:target_path = expand('~/.vim/undo')
  endif
  let &undodir=s:target_path
  set undofile
endif

" CTags
set tags&
set tags+=gems.tags
set tags+=stdlibs.tags

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

let g:startify_bookmarks = [ {'c': '~/.vimrc'}, '~/.zshrc' ]
let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ ]

" Disable <C-S> in insert mode
let g:surround_no_insert_mappings = 1

" Go
let g:go_dispatch_enabled = 1
let g:go_metalinter_autosave = 1

if has('nvim')
  let test#strategy = "neovim"
else
  let test#strategy = "vimterminal"
endif

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>

if has("autocmd")
  augroup Rails-vim
    autocmd!
  augroup END

  autocmd Rails-vim User Rails UltiSnipsAddFiletypes rails.ruby

  if has("mac")
    autocmd Rails-vim User Rails DashKeywords rails rubygems ruby
  endif
endif

" RSpec configurations
let g:rspec_command = 'bin/rspec'
let g:turbux_command_rspec = 'bin/rspec'

" Rails.vim projections
" Require vim-bundler
let g:rails_gem_projections = {
      \ "carrierwave": {
      \   "app/uploaders/*_uploader.rb": {
      \     "command": "uploader",
      \     "template":
      \       "class %SUploader < CarrierWave::Uploader::Base\nend",
      \     "test": "spec/models/%s_uploader_spec.rb",
      \     "related": "app/models/images/%s.rb",
      \     "keywords": "process version"
      \ }},
      \ "shrine": {
      \   "app/uploaders/*_uploader.rb": {
      \     "command": "uploader",
      \     "template":
      \       "class %SUploader < Shrine\nend",
      \     "test": "spec/models/%s_uploader_spec.rb",
      \     "keywords": "process plugin"
      \ }},
      \ "paper_trail": {
      \   "app/models/*.rb": {
      \     "keywords": "has_paper_trail"}},
      \ "squeel":{
      \   "app/models/*.rb": {
      \     "keywords": "sifter"}},
      \ "sidekiq": {
      \   "app/workers/*.rb": {
      \     "command": "worker",
      \     "template": "class %SWorker\n  include Sidekiq::Worker\nend",
      \     "keywords": "sidekiq_options"}},
      \ "active_model_serializers": {
      \   "app/serializers/*_serializer.rb": {
      \     "command": "serializer",
      \     "template": "class %SSerializer < ActiveModel::Serializer\nend",
      \     "keywords": "attribute attributes cache cache_key type"}},
      \ "alba": {
      \   "app/resource/*_resource.rb": {
      \     "command": "resource",
      \     "template": "class %SResource\n  include Alba::Resource\nend",
      \     "keywords": "attribute attributes root_key one many"}},
      \ "aasm": {
      \   "app/models/*.rb": {
      \     "keywords": "aasm state event transitions"}},
      \ "friendly_id": {
      \   "app/models/*.rb": {
      \     "keywords": "friendly_id"}},
      \ "interactor": {
      \   "app/interactors/*.rb": {
      \     "command": "interactor",
      \     "template": ["class %S", "include Interactor", "end"],
      \     "test": "spec/interactors/%s_spec.rb",
      \     "keywords": "organize" }}
      \ }

let g:rails_projections = {
      \ "app/errors/*_error.rb": {
      \   "command": "error",
      \   "template": "class %SError\nend",
      \   "test": "spec/errors/%s_error_spec.rb" },
      \ "app/forms/*_form.rb": {
      \   "command": "form",
      \   "template": "class %SForm\nend",
      \   "test": "spec/forms/%s_form_spec.rb" },
      \ "app/presenters/*_presenter.rb": {
      \   "command": "presenter",
      \   "template": "class %SPresenter\nend",
      \   "test": "spec/presenters/%s_presenter_spec.rb"},
      \ "app/services/*.rb": {
      \   "command": "service",
      \   "template": "class %SService\nend",
      \   "test": "spec/services/%s_spec.rb" },
      \ "app/queries/*.rb": {
      \   "command": "query",
      \   "template": "class %SQuery\nend",
      \   "test": "spec/queries/%s_spec.rb" }
      \ }

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"]

set hidden

" Fugitive key mappings
" Fugitive prefix
nnoremap [Fugitive] <Nop>
nmap <Leader>g [Fugitive]

nnoremap [Fugitive]g :<C-u>Git<CR>
nnoremap [Fugitive]d :<C-u>Git diff<CR>
nnoremap [Fugitive]s :<C-u>Git status<CR>
nnoremap [Fugitive]l :<C-u>Git log<CR>
nnoremap [Fugitive]a :<C-u>Git add %<CR>
nnoremap [Fugitive]c :<C-u>Git commit<CR>
nnoremap [Fugitive]C :<C-u>Git commit --amend<CR>
nnoremap [Fugitive]b :<C-u>Git blame<CR>

" A function to tell if specified gem is installed
function! HasBundled(name)
  let file = getcwd().'/Gemfile.lock'
  if filereadable(file)
    for line in readfile(file)
      if line =~ a:name.' '
        return 1
      endif
    endfor
  endif
  return 0
endfunction

if has('nvim')
lua << LUA
require'nvim-treesitter.configs'.setup {
  textobjects = {
    select = {
      enable = true,

      -- Automatically jump forward to textobj, similar to targets.vim
      lookahead = true,

      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",
      },
      -- You can choose the select mode (default is charwise 'v')
      selection_modes = {
        ['@parameter.outer'] = 'v', -- charwise
        ['@function.outer'] = 'V', -- linewise
        ['@class.outer'] = '<c-v>', -- blockwise
      },
      -- If you set this to `true` (default is `false`) then any textobject is
      -- extended to include preceding xor succeeding whitespace. Succeeding
      -- whitespace has priority in order to act similarly to eg the built-in
      -- `ap`.
      include_surrounding_whitespace = true,
    },
  },
  ensure_installed = { "ruby", "javascript", "typescript", "tsx", "vue", "html", "css", "scss", "lua", "c", "rust", "vim", "regex", "markdown", "markdown_inline", "json", "yaml" }, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  ignore_install = {}, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "c", "rust" },  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = { "ruby", "vim" },
  },
  refactor = {
    highlight_definitions = {
      enable = true,
      -- Set to false if you have an `updatetime` of ~100.
      clear_on_cursor_move = true,
    },
     highlight_current_scope = { enable = true },
  },
  rainbow = {
    enable = true,
    -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    -- colors = {}, -- table of hex strings
    -- termcolors = {} -- table of colour name strings
  }
}
require('kanagawa').setup({
  transparent = true,
})

-- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
snippet = {
  -- REQUIRED - you must specify a snippet engine
  expand = function(args)
  vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
end,
},
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
  sources = cmp.config.sources({
  { name = 'nvim_lsp' },
  { name = 'ultisnips' }, -- For ultisnips users.
  }, {
  { name = 'treesitter' },
  }, {
    {
      name = 'buffer',
      option = {
        get_bufnrs = function()
          return vim.api.nvim_list_bufs()
        end
        }
    },
    { name = 'tags' }
  })
})

cmp.setup.filetype('ruby', {
  sources = cmp.config.sources({
  {
    name = 'buffer',
    option = {
      get_bufnrs = function()
        return vim.api.nvim_list_bufs()
      end
      }
  },
  { name = 'nvim_lsp' },
  { name = 'ultisnips' },
  }, {
  { name = 'treesitter' },
  }, {
    { name = 'tags' }
  })
})

  -- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
  sources = cmp.config.sources({
    { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' },
    { name = 'cmdline_history' },
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' },
    { name = 'cmdline_history' },
  })
})

local lspkind = require('lspkind')
cmp.setup {
  formatting = {
    format = lspkind.cmp_format({
      mode = 'symbol', -- show only symbol annotations
      maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)

      -- The function below will be called before any actual modifications from lspkind
      -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
      before = function (entry, vim_item)
        return vim_item
      end
    })
  }
}

-- Setup lspconfig.
local lspconfig = require'lspconfig'

local tsserver_capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
lspconfig['tsserver'].setup {
  capabilities = tsserver_capabilities
}

lspconfig.yamlls.setup {
  settings = {
    yaml = {
      schemas = require('schemastore').json.schemas(),
      -- schemas = {
        -- ["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*"
      -- },
    },
  }
}

local jsonls_capabilities = vim.lsp.protocol.make_client_capabilities()
jsonls_capabilities.textDocument.completion.completionItem.snippetSupport = true

lspconfig.jsonls.setup {
  capabilities = jsonls_capabilities,
  settings = {
    json = {
      schemas = require('schemastore').json.schemas(),
    },
  },
}

lspconfig.solargraph.setup {
  autostart = false,
  cmd = { 'bundle', 'exec', 'solargraph', 'stdio' }
}

lspconfig.typeprof.setup {
  autostart = false,
  cmd = { 'bundle', 'exec', 'typeprof', '--lsp', '--stdio' },
}

lspconfig.steep.setup {
  autostart = false,
  cmd = { 'bundle', 'exec', 'steep', 'langserver' },
}

require("lsp-format").setup {}
lspconfig.gopls.setup { on_attach = require("lsp-format").on_attach }

local neogit = require("neogit")

neogit.setup {
  disable_signs = false,
  disable_hint = false,
  disable_context_highlighting = false,
  disable_commit_confirmation = false,
  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size.
  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.
  auto_refresh = true,
  disable_builtin_notifications = false,
  use_magit_keybindings = false,
  -- Change the default way of opening neogit
  kind = "tab",
  -- Change the default way of opening the commit popup
  commit_popup = {
    kind = "split",
  },
  -- Change the default way of opening popups
  popup = {
    kind = "split",
  },
  -- customize displayed signs
  signs = {
    -- { CLOSED, OPENED }
    section = { ">", "v" },
    item = { ">", "v" },
    hunk = { "", "" },
  },
  integrations = {
    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `sindrets/diffview.nvim`.
    -- The diffview integration enables the diff popup, which is a wrapper around `sindrets/diffview.nvim`.
    --
    -- Requires you to have `sindrets/diffview.nvim` installed.
    -- use {
    --   'TimUntersberger/neogit',
    --   requires = {
    --     'nvim-lua/plenary.nvim',
    --     'sindrets/diffview.nvim'
    --   }
    -- }
    --
    diffview = true
  },
  -- Setting any section to `false` will make the section not render at all
  sections = {
    untracked = {
      folded = false
    },
    unstaged = {
      folded = false
    },
    staged = {
      folded = false
    },
    stashes = {
      folded = true
    },
    unpulled = {
      folded = true
    },
    unmerged = {
      folded = false
    },
    recent = {
      folded = true
    },
  },
  -- override/add mappings
  mappings = {
    -- modify status buffer mappings
    status = {
      -- Adds a mapping with "B" as key that does the "BranchPopup" command
      ["B"] = "BranchPopup",
      -- Removes the default mapping of "s"
      ["-"] = "Stage",
    }
  }
}

require('gitsigns').setup()

require('lualine').setup()

require('trouble').setup()

require('rust-tools').setup({})

require('dap-ruby').setup()

require("dapui").setup()

require("nvim-surround").setup()

require('fzf-lua').setup {
  oldfiles = {
    include_current_session = true,  -- include bufs from current session
  },
}
LUA
colorscheme kanagawa
if HasBundled('solargraph')
  autocmd MyAutoCmd filetype ruby LspStart solargraph
end
if HasBundled('typeprof')
  autocmd MyAutoCmd filetype ruby LspStart typeprof
end
if HasBundled('steep')
  autocmd MyAutoCmd filetype ruby LspStart steep
end

" fzf key bindings with fzf-lua
nnoremap <Leader>f <cmd>lua require('fzf-lua').files()<CR>
nnoremap <Leader>b <cmd>lua require('fzf-lua').buffers()<CR>
nnoremap <Leader>hi <cmd>lua require('fzf-lua').oldfiles()<CR>
nnoremap <Leader>r <cmd>lua require('fzf-lua').grep_cword()<CR>
nnoremap <Leader>R <cmd>lua require('fzf-lua').grep_cWORD()<CR>
nnoremap <Leader>l <cmd>lua require('fzf-lua').live_grep()<CR>

" fzf-lua commands compatible with fzf.vim
command! -nargs=1 Rg lua require('fzf-lua').grep_project({search="<args>"})

" dap key bindings
nnoremap [DAP] <Nop>
nmap <Leader>d [DAP]
nnoremap <silent> [DAP]c  <cmd>lua require'dap'.continue()<CR>
nnoremap <silent> [DAP]sv <cmd>lua require'dap'.step_over()<CR>
nnoremap <silent> [DAP]si <cmd>lua require'dap'.step_into()<CR>
nnoremap <silent> [DAP]so <cmd>lua require'dap'.step_out()<CR>
nnoremap <silent> [DAP]b  <cmd>lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> [DAP]B  <cmd>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> [DAP]lp <cmd>lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> [DAP]r  <cmd>lua require'dap'.repl.open()<CR>
nnoremap <silent> [DAP]l  <cmd>lua require'dap'.run_last()<CR>
nnoremap <silent> [DAP]u  <cmd>lua require'dapui'.toggle()<CR>

let g:cursorhold_updatetime = 500
autocmd CursorHold * lua vim.diagnostic.open_float()
set shada='20,<50,s10 " Reduce shada so that it's faster to load

let g:neo_tree_remove_legacy_commands = 1
else
  " fzf key bindings
  nnoremap <Leader>f :<C-u>Files<CR>
  nnoremap <Leader>b :<C-u>Buffers<CR>
  nnoremap <Leader>hi :<C-u>History<CR>
  nnoremap <Leader>d :<C-u>Dirvish<CR>

  source ~/.vim/settings/bundle/lightline.vim

  let g:rainbow_active = 1
endif

let g:ale_linters = {
\   'ruby': ['rubocop'],
\   'rust': ['rustfmt'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\   'javascriptreact': ['prettier', 'eslint'],
\   'typescriptreact': ['prettier', 'eslint'],
\   'ruby': ['rubocop'],
\   'rust': ['rustfmt'],
\}
let g:ale_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_disable_lsp = 1
let g:ale_ruby_rubocop_executable='bundle'
let g:ale_floating_preview=1
let g:ale_cursor_detail = 1
let g:ale_hover_to_floating_preview=1 " With Neovim it shows hover info in floating window
let g:ale_echo_cursor = 0

let g:vim_jsx_pretty_colorful_config = 1

nmap <Leader>q <Plug>(quickrun)
vmap <Leader>q <Plug>(quickrun-op)

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" This auto folding behavior is so annoying
let g:vim_markdown_folding_disabled = 1

" Enable surround.vim keymap for sandwich
runtime macros/sandwich/keymap/surround.vim

tnoremap <C-h> <c-\><c-n><c-w>h
tnoremap <C-j> <c-\><c-n><c-w>j
tnoremap <C-k> <c-\><c-n><c-w>k
tnoremap <C-l> <c-\><c-n><c-w>l

" External rc files
" Include vimrc for mac
" Include user's local vim config
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
